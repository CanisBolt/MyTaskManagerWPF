<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChooseTaskView" xml:space="preserve">
    <value>Which tasks would you like to view?{0}1. All tasks{0}2. All active tasks{0}3. All archived tasks{0}4. By urgency{0}0. Cancel</value>
  </data>
  <data name="MainMenuPrompt" xml:space="preserve">
    <value>Choose an action:{0}1. View tasks{0}2. Add tasks{0}3. Delete tasks{0}4. Save tasks{0}5. Load tasks{0}6. Edit tasks{0}7. Mark as complete{0}0. Exit program</value>
  </data>
  <data name="NoArchiveTasks" xml:space="preserve">
    <value>No archive tasks.</value>
  </data>
  <data name="NoTasksFound" xml:space="preserve">
    <value>Task list is empty!</value>
  </data>
  <data name="EnterTaskName" xml:space="preserve">
    <value>Enter task name: </value>
  </data>
  <data name="TaskNameCannotBeEmpty" xml:space="preserve">
    <value>Task name cannot be empty!</value>
  </data>
  <data name="EnterTaskDescription" xml:space="preserve">
    <value>Enter task decription: </value>
  </data>
  <data name="TaskDescriptionCannotBeEmpty" xml:space="preserve">
    <value>Task text cannot be empty!</value>
  </data>
  <data name="ChoosePriority" xml:space="preserve">
    <value>Please choose the task's importance level:{0}1. Low{0}2. Medium{0}3. High{0}4. Urgent</value>
  </data>
  <data name="InvalidInput" xml:space="preserve">
    <value>Invalid input.</value>
  </data>
  <data name="InvalidInputYesNo" xml:space="preserve">
    <value>Invalid input. Please enter yes or no.</value>
  </data>
  <data name="TaskSuccessfullyAdded" xml:space="preserve">
    <value>Task successfully added!</value>
  </data>
  <data name="DeleteActiveOrArchive" xml:space="preserve">
    <value>Enter 1 to delete active tasks, 2 to delete archived tasks:</value>
  </data>
  <data name="ChooseTaskToDelete" xml:space="preserve">
    <value>Enter the sequential number of the task you want to delete. (Enter 0 to cancel):</value>
  </data>
  <data name="TaskSuccessfullyDeleted" xml:space="preserve">
    <value>Task successfully deleted!</value>
  </data>
  <data name="ChooseTaskToEdit" xml:space="preserve">
    <value>Enter the sequential file number to edit. 0 to cancel editing:</value>
  </data>
  <data name="TaskSuccessfullyUpdated" xml:space="preserve">
    <value>Task successfully updated!</value>
  </data>
  <data name="MarkAsCompletedPrompt" xml:space="preserve">
    <value>Mark task as complete? (yes/no)</value>
  </data>
  <data name="MoveToArchivePrompt" xml:space="preserve">
    <value>Would you like to move this task to the archive? (yes/no).</value>
  </data>
  <data name="TaskCompletedAndArchived" xml:space="preserve">
    <value>Task completed and added to archive!</value>
  </data>
  <data name="DeleteAfterCompletionPrompt" xml:space="preserve">
    <value>Do you want to delete this task from the list? (yes/no)</value>
  </data>
  <data name="TaskDeletedFromList" xml:space="preserve">
    <value>Task removed from list.</value>
  </data>
  <data name="NoFilesToLoad" xml:space="preserve">
    <value>No files to load:</value>
  </data>
  <data name="FilesToLoadList" xml:space="preserve">
    <value>List of files to load:</value>
  </data>
  <data name="ChooseFileToLoad" xml:space="preserve">
    <value>Enter the sequential file number to load. 0 to cancel loading:</value>
  </data>
  <data name="CurrentDataWillBeErased" xml:space="preserve">
    <value>Warning! Current data will be erased! Are you sure you want to continue? (yes/no)</value>
  </data>
  <data name="LoadCancelled" xml:space="preserve">
    <value>Load canceled!</value>
  </data>
  <data name="LoadErrorFileEmpty" xml:space="preserve">
    <value>Error: File {0} is empty or contains invalid data.</value>
  </data>
  <data name="ErrorCorruptedJson" xml:space="preserve">
    <value>Error processing task file: {0}. The file might be corrupted or in an invalid JSON format.</value>
  </data>
  <data name="ErrorDetails" xml:space="preserve">
    <value>Details: {0}</value>
  </data>
  <data name="ErrorGeneric" xml:space="preserve">
    <value>An error occurred while loading tasks: {0}</value>
  </data>
  <data name="LoadFailed" xml:space="preserve">
    <value>Could not load!</value>
  </data>
  <data name="DataLoadedSuccessfully" xml:space="preserve">
    <value>Data successfully loaded!</value>
  </data>
  <data name="EnterSaveFileName" xml:space="preserve">
    <value>Enter the save file name. At least three characters.</value>
  </data>
  <data name="SaveFileNameTooShort" xml:space="preserve">
    <value>Invalid input. Please enter a name with at least three characters!</value>
  </data>
  <data name="FileExistsOverwriteWarning" xml:space="preserve">
    <value>Warning! all data will be overwritten! Are you sure you want to continue? (yes/no):</value>
  </data>
  <data name="SaveCancelled" xml:space="preserve">
    <value>Save canceled!</value>
  </data>
  <data name="TasksSuccessfullySaved" xml:space="preserve">
    <value>Tasks successfully saved!</value>
  </data>
  <data name="ErrorFileNotFound" xml:space="preserve">
    <value>Error: File {0} not found.</value>
  </data>
  <data name="NoTasksForDeletion" xml:space="preserve">
    <value>No active tasks to delete.</value>
  </data>
  <data name="NoTasksWithPriority" xml:space="preserve">
    <value>No tasks with the specified priority!</value>
  </data>
  <data name="TaskCreated" xml:space="preserve">
    <value>Created:</value>
  </data>
  <data name="TaskPriority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="NoActiveTasks" xml:space="preserve">
    <value>No active tasks.</value>
  </data>
  <data name="NoArchiveTasksForDeletion" xml:space="preserve">
    <value>Not archive tasks to delete.</value>
  </data>
  <data name="DisplayTaskByPriority" xml:space="preserve">
    <value>{0}. {1}{2}Created: {3}{2}{4}{2}Priority: {5}</value>
  </data>
  <data name="ArchiveHeader" xml:space="preserve">
    <value>{0}ARCHIVE:{1}</value>
  </data>
  <data name="ChooseLanguagePrompt" xml:space="preserve">
    <value>Choose a language:{0}1. Русский{0}2. English</value>
  </data>
  <data name="LanguageChangedSuccessfully" xml:space="preserve">
    <value>The language has been successfully changed to {0}!</value>
  </data>
  <data name="YesAnswer" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="NoAnswer" xml:space="preserve">
    <value>No</value>
  </data>
</root>